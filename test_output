       
       Z_score.push_back(test);
       cout<<"waste is: "<<waste<<", and ibuf is: "<<ibuf<<endl;
 int extractvariant(string input, string output, map<string,bool> &target1, string target)
  {
     cout<<"Come into extractvariant function to extract genotype for tartet variants"<<endl; 
     int i=0, j=0, k=0;
     input=input+string(".bed");
     output=output+string(".bed");
     string strfam="fam";
     string strbim="bim";
     string famfile=input;
     string bimfile=input;
     famfile.replace(famfile.end()-3,famfile.end(),strfam);
     bimfile.replace(bimfile.end()-3,bimfile.end(),strbim);
     string famout=output;
     string bimout=output;
     famout.replace(famout.end()-3,famout.end(),strfam);
     bimout.replace(bimout.end()-3,bimout.end(),strbim);
     int nsnp=readbim(bimfile);
     int nind=readfam(famfile);
     map<string,int> order;
     readbim(bimfile,order);
 
     for(map<string,int>::iterator Ite=order.begin();Ite!=order.end();Ite++)
      {
        cout<<"Variant is: "<<Ite->first<<", and order is: "<<Ite->second<<endl;
      }
 
     cout<<"I want to fuck Meixue1"<<endl;
     map<int, bool> INDEX;
     int index1=-1;
     for(map<string,bool>::iterator Ite=target1.begin();Ite!=target1.end();Ite++)
      {
 //       bool index1=false;
        cout<<"tested variant is: "<<Ite->first<<endl;
        if(order.find(Ite->first)!=order.end())
         {
           if(Ite->first ==target)
            {
              cout<<"Peak variant found"<<Ite->first<<endl;
              cout<<"Order of this variant is: "<<order[Ite->first]<<endl;
              index1=order[Ite->first];
              INDEX.insert(pair<int,bool>(order[Ite->first],true));
            } else
            {
              cout<<"Covariate variant found"<<endl;
              INDEX.insert(pair<int,bool>(order[Ite->first],false));
            }
         }
        
      }
     cout<<"index1 is: "<<index1<<endl;
     if(index1==-1)
      {
        return (-2);
      }   
      
     cout<<"I touch Meixue's breast"<<endl;
     mat _snp_2 =mat(INDEX.size(),nind, fill::zeros);
     mat _snp_1 =mat(INDEX.size(),nind, fill::zeros);
     char ch[1];
     bitset<8> b;
     cout<<"Size of INDEX is: "<<INDEX.size()<<endl;
     cout<<"input is: "<<input<<endl;
     fstream BIT(input.c_str(), ios::in|ios::binary);
     cout<<"Start to read genotype"<<endl;
     if(!BIT) throw("Error: can not open the file ["+input+"] to read.");
     for(i=0; i<3; i++) BIT.read(ch,1); // skip the first three bytes
     int snp_indx=0, indi_indx=0;
     map<int, bool> INDEX1;
     cout<<"I am here1"<<endl;
     cout<<"nsnp is: "<<nsnp<<endl;
     for(j=0, snp_indx=0; j<nsnp; j++)
      {
        if(INDEX.find(j)==INDEX.end())
         {
           cout<<"Not variant I interest"<<endl;
 //         for(int i=0;i<nind;)
          for(int i=0;i<nind;i+=4)
           {
           BIT.read(ch,1);
 /*
           b=ch[0];
           k=0;
           while(k < 7 && i < nind)
            {
              k++;
              k++;
              indi_indx++;
              i++;
            }
 */
           }
           cout<<"Is wrong?"<<endl;
           continue;
         }
        cout<<"Yes, touch Meixue's nipple, and flick it with my tongue"<<endl;
       if(j==index1)
        {
          INDEX1.insert(pair<int,bool> (snp_indx,true));
        } else
        {
          INDEX1.insert(pair<int,bool> (snp_indx,false));
        }
        for(i=0, indi_indx=0; i<nind;)
         {
           BIT.read(ch,1);
           cout<<"Fucking Meixue and Ruoyu"<<endl;
 //          if(!BIT) throw("Error: problem with the BED file ... has the FAM/BIM file been changed?");
           b=ch[0];
           k=0;
           while(k < 7 && i < nind)
            {
              _snp_2(snp_indx,indi_indx)=(!b[k++]);
              _snp_1(snp_indx,indi_indx)=(!b[k++]);
              indi_indx++;
              i++;
            }
         }
        snp_indx++;
      }
     cout<<"Meixue's pussy is messy"<<endl;
     mat dosage=mat(INDEX.size(),nind, fill::zeros);
     for(int i=0;i<_snp_2.n_rows;i++)
      {
        for(int j=0;j<_snp_2.n_cols;j++)
         {
           if(_snp_2(i,j)==0 && _snp_1(i,j)==1)
            {
              dosage(i,j)=-9;
            } else
            {
              dosage(i,j)=_snp_2(i,j)+_snp_1(i,j);
            }
         }
      }
     cout<<"I start to fuck Meixue heavily"<<endl;
     for(int i=0;i<dosage.n_rows;i++)
      {
        double Mean=0;
        int num=0;
        for(int j=0;j<dosage.n_cols;j++)
         {
           if(dosage(i,j)!=-9)
            {
              Mean+=dosage(i,j);
              num++;
            }
         }
        Mean/=num;
        for(int j=0;j<dosage.n_cols;j++)
         {
           if(dosage(i,j)==-9)
            {
              dosage(i,j)=Mean;
            }
         }
      }
     cout<<"Meixue is at orgasm"<<endl;
  //   map<string,int> order;
     map<int,string> order1;
  //   readbim(bimfile,order);
     map<string,int>::iterator Ite;
     Ite=order.find(target);
     if(Ite==order.end())
      {
        return -2;
      }
     map<string,int>::iterator Ite1;
     for(Ite1=order.begin();Ite1!=order.end();Ite1++)
      {
        order1.insert(pair<int, string>(Ite1->second, Ite1->first));
      }
     int T_index=Ite->second;
     vector<int> index;
     vector< vector<int> > _Snp_2;
     vector< vector<int> > _Snp_1;
     vector< vector<int> > _Snp_2_cov;
     vector< vector<int> > _Snp_1_cov;
     vector <int> C;
     bool cov_exists=false;
     for(int x=0;x<_snp_2.n_rows;x++)
      {
     //   mat r2=cor(dosage.row(x),dosage.row(T_index));
 //       if(r2(0,0)*r2(0,0)>=r2_cutoff)
        if(INDEX1[x])
         {
       //    C.push_back(x);
           vector<int> Test1;
           vector<int> Test2;
           for(int y=0;y<_snp_2.n_cols;y++)
            {
              Test1.push_back(_snp_1(x,y));
              Test2.push_back(_snp_2(x,y));
            }
           _Snp_2.push_back(Test2);
           _Snp_1.push_back(Test1);
         } else 
         {
  //         if(target1.find(order1[x])==target1.end())
  //          { 
  //            continue;
  //          }
           cov_exists=true;
     //      C.push_back(x);
           vector<int> Test1;
           vector<int> Test2;
           for(int y=0;y<_snp_2.n_cols;y++)
            {
              Test1.push_back(_snp_1(x,y));
              Test2.push_back(_snp_2(x,y));
            }
           _Snp_2_cov.push_back(Test2);
           _Snp_1_cov.push_back(Test1);
         }
      }
 //    if(!cov_exists)
 //     {
 //       return -1;
 //     }
    int Ret=-1;
    if(INDEX1.size()>1)
    {
      Ret=0;
     string output_cov=output+string("_cov");
   
     
     fstream  FHOU(output_cov.c_str(),ios::out);
     if(!FHOU)
     {
       return (1);
     }
     cout<<"dosage is: "<<endl;
     cout<<dosage<<endl;
 //   FHOU<<input[0][0];
 //   for(int i=0;i<C.size();i++)
    for(int i=0;i<dosage.n_cols;i++)
     {
 //      if(INDEX1[i])
 //       {
 //         continue;
 //       }
       FHOU<<"1";
       for(int j=0;j<dosage.n_rows;j++)
        {
          if(INDEX1[j])
           {
             continue;
           }
          FHOU<<"	"<<dosage(j,i);
        }
       FHOU<<endl;
     }
    FHOU.clear();
    FHOU.close(); 
    }
 //   return (0);   
  
     mat _snp_2_target=mat(_Snp_2.size(),_Snp_2[0].size(),fill::zeros);
     mat _snp_1_target=mat(_Snp_1.size(),_Snp_1[0].size(),fill::zeros);
     for(int i=0;i<_Snp_1.size();i++)
      {
        for(int j=0;j<_Snp_1[0].size();j++)
         {
           _snp_1_target(i,j)=_Snp_1[i][j];
           _snp_2_target(i,j)=_Snp_2[i][j];
         }
      }
     outputbed(_snp_2_target,_snp_1_target,output);
     copyfam(famfile,famout);
     cout<<"index1 is: "<<index1<<endl;
     C.push_back(index1);
     copybim(bimfile,bimout,C);
     BIT.clear();
     BIT.close();
     return Ret;
  }
 
    
 void read_cor_file(mat &Cov_, string cor_file, int n)
  {
    int ibuf=0;
    int ind1=-1;
    int ind2=-1;
    cout<<"cor_file is: "<<cor_file<<endl;
    cout<<"n is: "<<n<<endl;
    string a;
    string str_buf;
    ifstream Bim(cor_file.c_str());
    if(!Bim) throw("Error: can not open the file ["+cor_file+"] to read.");
    cout<<"I am here in read_cor_file function"<<endl;
    while(Bim &&getline(Bim,a))
              {
                ind1++;
                ind2=-1;
                if(ind1<n)
                 {
                    double c=0;
                    stringstream ss(a);
 //                      vector<double> T;
                       while(ss && ss>>c)
                        {
                          cout<<" "<<c;
                          ind2++;
                          if(ind2<n)
                           {
                             Cov_(ind1,ind2)=c;
                           }
                        }
 
                 }
                cout<<endl;
               }
    Bim.clear();
    Bim.close();
 //   return ibuf;
  }
 double ConstructCovRandom(vector<vector<vector<double> > > &z_score_, vector<vector<vector<double> > > &beta_,  vector<vector<vector<double> > > &sd_, int index, mat &Res_fixed, mat &Res_random, string meta_mode, string output, vector<vector<string> >  &variant_, map<string, bool> &pos, map<string, bool> &pos1, map <string, vector<double>> &Res, map<string, double > &MAF, vector<double> &VARIANCE, map<int,bool> &data_index, vector<double> &z_score, vector<double> &beta, vector<double> &sd, map<string, string> &ALLELE,string cor_file, bool write_cor)
 
    mat Cov_ =mat(cov_z_score_copy.n_cols,cov_z_score_copy.n_cols, fill::ones);
    if(cor_file=="")
     { 
 //   mat Cov_ =mat(cov_z_score_copy.n_cols,cov_z_score_copy.n_cols, fill::ones);
    }
    if(cor_file!="")
     {
       cout<<"Go to extract summary correlation file"<<endl;
       read_cor_file(Cov_, cor_file, cov_z_score_copy.n_cols);
       cout<<"Reading correlation file is done"<<endl;
     } else
     {
       Cov_ =cov(cov_z_score_copy);
     }
 
    if(write_cor)
     {
       string cor_output=output+string("_summary_correlation");
       fstream  FHOU(cor_output.c_str(),ios::out);
       for(int i=0;i<Cov_.n_rows;i++)
        {
          FHOU<<Cov_(i,0);
          for(int j=1;j<Cov_.n_cols;j++)
           {
             FHOU<<"\t"<<Cov_(i,j);
           }
          FHOU<<endl;
        }
       FHOU.clear();
       FHOU.close();
     }
    
    cout<<"Cov_ is: "<<endl;
    cout<<Cov_<<endl;
 
       double geno_variance =2*MAF[variant_[0][i]]*(1-MAF[variant_[0][i]]);
          statisticRandomEffects2_=0;
     cout<<"There are only 2 data set available for analysis"<<endl;
       double geno_variance =2*MAF[variant_[0][i]]*(1-MAF[variant_[0][i]]);
    cout<<"There is only one single data"<<endl;
 void prepare_gwas_summary(string input, string output,map <string, vector<double>>  &Res_fixed, map<string, bool> &index,vector<string> &target,map<string,bool> &MAP)
 int localization(vector<vector<string> > &variant_, map <string, vector<double>>  &Res_fixed, map<string, string> &GWAS_file, string output_prefix, map<string, double > &MAF, string colocalization_method,string gene, bool finemap)
       cout<<"Doing finemapping"<<endl;
      prepare_gwas_summary(GWAS_file, gwas_summary1, Res_fixed, index,target,MAP);
          cout<<"Unfortunately, there is no variant to explore"<<endl;
      cout<<"Come into colocalization function"<<endl;
      cout<<"Extract variants with LD profile available"<<endl;
     cout<<"Prepare gwas summary results"<<endl;
      prepare_gwas_summary(it->second, gwas_summary1, Res_fixed, index,target,MAP);     
         cout<<"There is no explored variant"<<endl;
      cout<<"Number of explored variants is: "<<target.size()<<endl;
      cout<<"Prepare eQTL summary results"<<endl;
      cout<<"Prepare LD structure matrix"<<endl;
      cout<<"First, perform finemapping for gwas summary result"<<endl;
      cout<<"Secondly, perform finemapping for eQTL summary result"<<endl;
 double MetaAnalysis(vector<vector<vector<double> > > &z_score_, vector<vector<vector<double> > >&beta_, vector<vector<vector<double> > >&sd_,int index, mat &Res_fixed, mat &Res_random, string meta_mode, string output, vector<vector<string> > &variant_, map<string, bool> &pos, int colocalization, map<string, string> &GWAS_file, map<string, double > &MAF, vector<double > &VARIANCE, map<int,bool> &data_index,string gene, bool INDEX, bool finemap, map<string, string> & ALLELE, double p_cutoff,string cor_file, bool write_cor)
    cout<<"Come into MetaAnalysis function to perform final meta-analysi"<<endl;
    cout<<"Start.............."<<endl;
    cout<<"Infor1 is "<<z_score_.size()<<" "<<beta_.size()<<" "<<sd_.size()<<" "<<variant_.size()<<" "<<data_index.size()<<endl;
    cout<<"Infor2 is "<<z_score_[0][0].size()<<" "<<beta_[0][0].size()<<" "<<sd_[0][0].size()<<" "<<variant_[0].size()<<endl; 
    double P=ConstructCovRandom(z_score_, beta_, sd_ ,index , Res_fixed, Res_random, meta_mode, output1, variant_, pos, pos1, Res, MAF, VARIANCE, data_index, test1, test2,test3, ALLELE, cor_file, write_cor);
    cout<<"P is: "<<P<<endl;
    cout<<"Meta analysis is over, and I will determine perform localization or not"<<endl;
    cout.precision(17);
    cout<<"Resulted p-value from meta-analysis is: "<<P<<endl;
       cout<<"Perform colocalization analysis"<<endl;
       localization(variant_,Res, GWAS_file, output1, MAF,localization_method,gene,finemap);
       cout<<"colocalization analysis is over"<<endl;
 double MetaAnalysis(vector<vector<vector<double> > > &z_score_, vector<vector<vector<double> > >&beta_, vector<vector<vector<double> > >&sd_,int index, mat &Res_fixed, mat &Res_random, string meta_mode, string output, vector<vector<string> > &variant_, map<string, bool> &pos, int colocalization, map<string, string> &GWAS_file, map<string, double > &MAF, vector<double > &VARIANCE, map<int,bool> &data_index,string gene,vector<double> &test1_1, vector<double> &test2_1, vector<double> &test3_1, map<string, string> &ALLELE, string cor_file, bool write_cor)
    double P=ConstructCovRandom(z_score_, beta_, sd_ ,index , Res_fixed, Res_random, meta_mode, output1, variant_, pos, pos1, Res, MAF, VARIANCE, data_index,test1_1,test2_1, test3_1, ALLELE, cor_file, write_cor);
            cout<<"Come into function ReadInputFile "<<endl;
                cout<<"Str is: "<<Str<<endl;
 
 
    
    cout<<"Come into function read_cis_summary to extract eQTL signals"<<endl; 
 int MM_conditional_analysis(vector<string> &file_, string gene, int totalCausalSNP,float rho, bool histFlag, double gamma,string weight, int nthread,vector<string> &covariate_, vector <string> &grm_file_,string outputFile,vector<string> &geno_file_, string meta_mode, vector<string> &allele_file_, map<string, bool> &pos, int colocalization, map<string, string> &GWAS_file, map<string, double> &MAF,map<int,bool> &data_index, int nested, bool finemap, double p_cutoff, bool cis_summary, string cor_file, vector<string> &causal)
    
       cout<<"Extract explored variants in dataset "<<i<<endl;
      if(!cis_summary)
 //        for(map<string, int>::iterator it; it!=)
    cout<<"I am here1"<<endl;
    bool write_cor=true;
       if(cor_file!="")
        {
          index=0;
        } 
       cout<<"Start to perform eQTL or extract eQTL signal"<<endl;
          conditional_analysis(file_[I], gene, totalCausalSNP, rho,histFlag,  gamma, weight, nthread, covariate_[I], grm_file_[I], OutputFile, geno_file_[I],z_score, beta, sd,1, variant, removal1, I, colocalization, Variance);
          read_allele(allele_file_[I],allele);
 //         VARIANCE.push_back(Variance);
 //         read_allele(allele_file_[I],allele);
          cout<<"Start to combine the eQTL signals"<<endl;
             cout<<"Test for variant "<<it->first<<endl;
                cout<<"OK, Get eQTL signal"<<endl;
                cout<<"allele is: "<<allele[it->first]<<endl;
                cout<<"In ALLELE, it is: "<<ALLELE[it->first]<<endl;
                   
          cout<<"Recording QTL signal is over"<<endl;
             string test_file=""; 
             MetaAnalysis(z_score_nested,  beta_nested, sd_nested, x, Res_fixed, Res_random, "fixed", Output1, variant_nested, pos, 0,GWAS_file, MAF, VARIANCE, data_index1, gene, test1_1, test2_1, test3_1, ALLELE, test_file,false);
             P=MetaAnalysis(z_score_nested2,  beta_nested2, sd_nested2, x, Res_fixed_2, Res_random_2, "random", Output2, variant_nested2, pos, 0,GWAS_file, MAF, VARIANCE2, data_index2, gene, INDEX, finemap, ALLELE,p_cutoff,cor_file,false);
           INDEX=false;
           cout<<"Do the fuc now"<<endl;
           cout<<"Dimension for the summary result is: "<<endl;
           cout<<z_score_.size()<<endl;
           cout<<z_score_[0].size()<<endl;
           cout<<z_score_[0][0].size()<<endl;
           P1=MetaAnalysis(z_score_,  beta_, sd_, x, Res_fixed, Res_random, meta_mode, Output, variant_, pos, colocalization,GWAS_file, MAF, VARIANCE, data_index, gene, INDEX, finemap, ALLELE,p_cutoff,cor_file, write_cor);
           write_cor=false;
                causal.push_back(PEAK); 
                causal.push_back(PEAK);
                causal.push_back(PEAK);
                causal.push_back(PEAK);
         
    if(removal.size()>0)
     {
    for(int indx=0;indx<removal.size();indx++)
     {
       cout<<removal[indx]<<endl;
     }
     }
 //         str.clear();
          if(covariate!="NA")
           {
             str.clear();
             str.assign(covariate);
             cPar.file_cvt=str;          
             cPar.maf_level=-1;
           }
             cPar.a_mode=1;
          cPar.a_mode=1;
